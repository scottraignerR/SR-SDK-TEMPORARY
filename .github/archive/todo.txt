# TODO 1: Create event that triggers on tag push (HAE does this accidentally?)
# TODO 2: Need to handle system apps, probably a hardcoded list, then incorporate system app signing steps
# TODO 3: Place tests in own job.
# TODO 4: Find better name for job
# TODO 5: Change WN-SDK-TEMPORARY to WN-SDK upon deployment

# TODO: Add list of requirements, so when incorporating into a new repo, we know exactly what
        # to look for and check off.
# TODO: I'm not understanding the colleration between the GitHub repo names and the Components. 
        # Should and can we put the repo names into the components field to 
        # make is easier to identify which repo(s) is affected?
# TODO: Push a package to GitHub Packages (needs much more testing).
        # Figure out how to delete previous packages in WN-SDK repo.
# TODO: Need to sign the Release build
        # https://github.com/marketplace/actions/sign-android-release\
        # https://developer.android.com/training/articles/keystore
        # http://www.londatiga.net/it/how-to-sign-apk-zip-files/
        # javaExe.toString(), "-jar", apkSigner.toString(), "-w", pemFile.toString(), pk8File.toString(), apk.getAbsolutePath(), outputFile.toString()); FOR SYSTEM KEYS
        # apksigner sign --ks my-release-key.jks --out my-app-release.apk my-app-unsigned-aligned.apk FOR APP KEYS
        # https://developer.android.com/studio/build/building-cmdline
        # QUESTION: Which apps needs system key and which only need app key?
        # WILL BE WRITING CUSTOM NON-OPEN SOURCE VERSION USING DOCKER, BASED ON: https://github.com/marketplace/actions/sign-android-release\
# TODO: Add jarsigner to verify what key signed the app. 
        # $ "jarsigner -verify -verbose -certs app.apk"
        # Result should be: - Signed by "EMAILADDRESS=info@realwear.com, OU=Software, O=RealWear Inc, L=Milpitas, ST=California, C=US"
                              # Digest algorithm: SHA-256
                              # Signature algorithm: SHA256withRSA, 2048-bit key
        # https://developer.android.com/studio/build/building-cmdline
# TODO: Greg's notes:
        # Retrieve translation differences and post them in release notes via "git log --grep Weblate etc." At least list the affected languages? Per repo? 
        # For total release package, need to have all apks unzip to same folder per Greg: https://realwear.atlassian.net/wiki/spaces/RSE/pages/420380780/Zip+File+Reference+for+Release+Collection
        # He would like the same format, such as the old method: "5 weeks ago 2019-10-16 13:54:46 +0100  Douglas Mearns HMT-3083 - fix of bug accidently introduced."
# TODO: Pull Request lint, verify the PR name or comments contains "HMT-xxxx"
        # https://github.com/vijaykramesh/pr-lint-action
        # Request from Kieren, what is the exact use case?
# TODO: Create an action that counts numbers of tests before and after, send message if number did not increase.
# TODO: Email out release notes when a release is created.
        # Existing GitHub Actions are V1, not V2 compatible. Would need a custom solution.
# TODO: Verify final artifact pushed to release is indeed "release" and NOT "debug". How can we determine the difference?
        # WAS BLOCKED, no idea how to do this just yet, need to try method below.
        # aapt dump badging /path/to/apk | grep -c application-debuggable from:
        # https://stackoverflow.com/questions/7085644/how-to-check-if-apk-is-signed-or-debug-build
# TODO LONG TERM: Use emulator to run instrumented tests: 
        # https://github.com/vgaidarji/android-github-actions/tree/master/emulator
        # https://github.com/Malinskiy/action-android
        # https://android.googlesource.com/platform/external/adt-infra/+/958180293308f4be67f6369acb075503f84a08b1/emu-image/external/
# TODO LONG TERM: Create an action that counts numbers of tests before and after, send message if number did not increase.
# TODO: Semantic pull requests, must have specific title in order to be merged
        # Will this assist us in the future?
        # https://probot.github.io/apps/semantic-pull-requests/
# TODO: Send both debug and release builds as uploads to the Release? 
        # Or create two releases each time, a 1.2.3.123-DEBUG and 1.2.3.123-RELEASE?
        # Not ideal, because release/latest won't work as we want.
        # Or do we put both artifacts into one release? Then download them and only pull the ones we want?
# TODO LONG TERM: Add lint to pull requests
        # https://github.com/seferov/pr-lint-action
        # https://github.com/wagoid/commitlint-github-action
# TODO: # Random features to investigate:
          # https://dependabot.com/blog/hello-github/
          # https://github.com/benjefferies/branch-protection-bot
          # https://github.com/steebchen/kubectl
          # https://fabianmoronzirfas.me/tech/2019/02/06/cross-repo-github-action-triggering.html
          # https://github.com/defold/repository-dispatch
          # https://github.community/t5/GitHub-Actions/Triggering-by-other-repository/m-p/30688#M512
          # https://github.community/t5/GitHub-Actions/GitHub-Actions-Manual-Trigger-Approvals/m-p/31504
          # Microsoft Teams 
            # https://techcommunity.microsoft.com/t5/Microsoft-Teams-Blog/GitHub-Code-better-together-with-GitHub-and-Microsoft-Teams/ba-p/659444
            # https://docs.microsoft.com/en-us/connectors/github/
            # https://zapier.com/apps/github/integrations/microsoft-teams    
