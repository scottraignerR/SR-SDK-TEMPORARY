name: Integration Pull Request

on:
  pull_request:
    branches:
      - integration

jobs:
  IntegrationPullRequestBuildAndTest:

    runs-on: ubuntu-latest
    env: 
      MAJOR_VERSION: 0
      MINOR_VERSION: 0
      PATCH_VERSION: 0

    steps:

    - name: Generate build number
      uses: einaregilsson/build-number@v2
      with:
        token: ${{secrets.github_token}}

    - name: Print new build number
      run: echo "Build number is $BUILD_NUMBER"
      
    - name: Run the actions/checkout lib v1
      uses: actions/checkout@v1

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Get application version
      run: echo "::set-env name=MAJOR_VERSION::$(cat build.gradle | grep 'majorVersion = ' | awk '{print $3}')" &&
        echo "::set-env name=MINOR_VERSION::$(cat build.gradle | grep 'minorVersion = ' | awk '{print $3}')" &&
        echo "::set-env name=PATCH_VERSION::$(cat build.gradle | grep 'patchVersion = ' | awk '{print $3}')"
    
    - name: Set the four digit version
      run: echo "##[set-output name=version_build;]$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION.$BUILD_NUMBER"
      id: version_build_output

    - name: Echo the four digit version
      run: echo "Building application v${{ steps.version_build_output.outputs.version_build }}"

    - name: Set gradle version
      run: chmod +x gradlew && ./gradlew wrapper --gradle-version=6.0

    - name: Check gradle version
      run: ./gradlew --version

    - name: Build the Debug
      run: ./gradlew assembleDebug

    - name: Build the Release
      run: ./gradlew assembleRelease

    - name: Run Unit Tests on Debug
      run: ./gradlew testDebugUnitTest

    - name: Run Unit Tests on Release
      run: ./gradlew testReleaseUnitTest

    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: WN-SDK
        path: sdk/build/outputs/aar

    - name: Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

    # Export branch names as outputs
    - name: Set branch as environment variable
      run: echo "##[set-output name=branch_head_name;]${GITHUB_HEAD_REF}" &&
        echo "##[set-output name=branch_base_name;]${GITHUB_BASE_REF}"
      id: branch_name_output

    - name: Comment on issue
      uses: atlassian/gajira-comment@master
      with:
        issue: ${{ steps.branch_name_output.outputs.branch_head_name }} # The branch name should correlate with issue in Jira
        comment: |
          Pull Request into ${{ steps.branch_name_output.outputs.branch_base_name }} from branch "${{ steps.branch_name_output.outputs.branch_head_name }}" submitted for ${{ github.repository }} v${{ steps.version_build_output.outputs.version_build }}

    # For Pull Requests only
    - name: Post version and build number to Pull Request as a comment
      uses: mshick/add-pr-comment@v1
      with:
        message: |
          **Successfully built and tested ${{ github.repository }} v${{ steps.version_build_output.outputs.version_build }}**
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        allow-repeats: false

  IntegrationPullRequestLint:

    runs-on: ubuntu-latest

    steps:

    - name: Run the actions/checkout lib v1
      uses: actions/checkout@v1

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Set gradle version
      run: chmod +x gradlew && ./gradlew wrapper --gradle-version=6.0

    - name: Check gradle version
      run: ./gradlew --version

    - name: Run lint
      run: ./gradlew lint
