name: Master Branch Pull Request

on:
  pull_request:
    branches:
      - master

jobs:
  MasterPullRequestBuildAndTest:

    runs-on: ubuntu-latest
    env: 
      MAJOR_VERSION: 0
      MINOR_VERSION: 0
      PATCH_VERSION: 0
      # Set this variable for each project. 
      OUTPUT_FOLDER_PATH: "sdk/build/outputs/aar"

    steps:
    
    - name: Generate build number
      uses: einaregilsson/build-number@v2
      with:
        token: ${{secrets.github_token}}

    - name: Print new build number
      run: echo "Build number is $BUILD_NUMBER"

    - name: Ouput folder as variable
      run: echo "##[set-output name=folder_name;]${OUTPUT_FOLDER_PATH}"
      id: folder_name_output

    - name: Run the actions/checkout lib v1
      uses: actions/checkout@v1

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Get application version
      run: echo "::set-env name=MAJOR_VERSION::$(cat build.gradle | grep 'majorVersion = ' | awk '{print $3}')" &&
        echo "::set-env name=MINOR_VERSION::$(cat build.gradle | grep 'minorVersion = ' | awk '{print $3}')" &&
        echo "::set-env name=PATCH_VERSION::$(cat build.gradle | grep 'patchVersion = ' | awk '{print $3}')"

    - name: Set the four digit version
      run: echo "##[set-output name=version_build;]$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION.$BUILD_NUMBER"
      id: version_build_output

    - name: Echo the four digit version
      run: echo "Building application v${{ steps.version_build_output.outputs.version_build }}"

    - name: Set gradlew file to executable
      run: chmod +x gradlew # && ./gradlew wrapper --gradle-version=6.0

    - name: Check gradle version
      run: ./gradlew --version

    - name: Build the Debug
      run: ./gradlew assembleDebug

    - name: Build the Release
      run: ./gradlew assembleRelease

    - name: Run Unit Tests on Debug
      run: ./gradlew testDebugUnitTest

    - name: Run Unit Tests on Release
      run: ./gradlew testReleaseUnitTest

    - name: Ouput repository name without owner as variable
      run: echo "##[set-output name=repo_name;]${GITHUB_REPOSITORY#realwear/}"
      id: repo_name_output

    - name: List artifacts
      run:  |
        ls -al **/build/outputs/*

    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: ${{ steps.repo_name_output.outputs.repo_name }}_v${{ steps.version_build_output.outputs.version_build }}
        path: sdk/build/outputs/aar

    - name: Set branch as environment variable
      run: echo "##[set-output name=branch_head_name;]${GITHUB_HEAD_REF}" &&
        echo "##[set-output name=branch_base_name;]${GITHUB_BASE_REF}"
      id: branch_name_output

      # For Pull Requests only
    - name: Post version and build number to Pull Request as a comment
      uses: mshick/add-pr-comment@v1
      with:
        message: |
          Build successful for Pull Request into ${{ steps.branch_name_output.outputs.branch_base_name }} 
          from branch "${{ steps.branch_name_output.outputs.branch_head_name }}" 
          submitted for ${{ github.repository }} 
          Version v${{ steps.version_build_output.outputs.version_build }}
          submitted by @${{ github.actor }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        allow-repeats: false

  MasterPullRequestLint:

    runs-on: ubuntu-latest

    steps:

    - name: Run the actions/checkout lib v1
      uses: actions/checkout@v1

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Set gradlew file to executable
      run: chmod +x gradlew # && ./gradlew wrapper --gradle-version=6.0

    - name: Check gradle version
      run: ./gradlew --version

    - name: Run lint
      run: ./gradlew lint
