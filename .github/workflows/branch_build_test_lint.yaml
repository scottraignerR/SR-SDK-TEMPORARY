name: Branch Build Test Lint

on:
  push:
    branches-ignore:
      - master
      - integration

  # schedule:
    # - cron: 5 * * * *

# TODO: Verify final artifact pushed to release is indeed "release" and NOT "debug". How can we determine the difference?
# TODO: Possibly increment build only in specific triggers, had an odd error when 4-5 builds were running simultaneously. See if error occurs again.
# TODO: Incorporate actions/cache (Scott working on it)
# TODO: realse action pulls from integration vs master, need to fix this!!
# TODO: Edit body of the release to include more info possibly?
# TODO: Set version of minSdk, targetSdk, compileSdk here also? Override them preferrably so devs can still do local builds.
# TODO: automerge and delete the old branch once all checks pass and reviewers approve:
        # https://github.com/pascalgn/automerge-action
# TODO: Incorporate and test cron schedule. NOT WORKING?
# TODO: Output build number as a comment to each PR? 
        # https://github.com/unsplash/comment-on-pr
# TODO: Need to sign the Release build, then push.
        # https://github.com/marketplace/actions/sign-android-release\
# TODO: Auto check for gradle updates?
        # https://github.com/MeilCli/gradle-update-check-action
# TODO LONG TERM: Use emulator to run instrumented tests: 
        # https://github.com/vgaidarji/android-github-actions/tree/master/emulator
        # https://github.com/Malinskiy/action-android
# TODO LONG TERM: Incorporate SonarQube?

jobs:

  BranchBuildAndTest:

    runs-on: ubuntu-latest
    env: 
      MAJOR_VERSION: 0
      MINOR_VERSION: 0
      PATCH_VERSION: 0

    steps:

    - name: Generate build number
      uses: einaregilsson/build-number@v2
      with:
        token: ${{secrets.github_token}}

    - name: Print new build number
      run: echo "Build number is $BUILD_NUMBER"

    - name: Run the actions/checkout lib v1
      uses: actions/checkout@v1

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Get application version
      run: echo "::set-env name=MAJOR_VERSION::$(cat build.gradle | grep 'majorVersion = ' | awk '{print $3}')" &&
        echo "::set-env name=MINOR_VERSION::$(cat build.gradle | grep 'minorVersion = ' | awk '{print $3}')" &&
        echo "::set-env name=PATCH_VERSION::$(cat build.gradle | grep 'patchVersion = ' | awk '{print $3}')"

    - name: Echo android application/library version
      run: echo "Application version v"$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION

    - name: Set gradle version to 6.0
      run: chmod +x gradlew && ./gradlew wrapper --gradle-version=6.0

    - name: Check gradle version
      run: ./gradlew --version

    - name: Build the Debug
      run: ./gradlew assembleDebug

    - name: Build the Release
      run: ./gradlew assembleRelease

    - name: Run Unit Tests on Debug
      run: ./gradlew testDebugUnitTest

    - name: Run Unit Tests on Release
      run: ./gradlew testReleaseUnitTest

    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: WN-SDK
        path: sdk/build/outputs/aar

  BranchLint:

    runs-on: ubuntu-latest

    steps:

    - name: Run the actions/checkout lib v1
      uses: actions/checkout@v1

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Set gradle version
      run: chmod +x gradlew && ./gradlew wrapper --gradle-version=6.0

    - name: Check gradle version
      run: ./gradlew --version

    - name: Run lint
      run: ./gradlew lint



#     - name: Publish the package to GitHub Registry
#       env: 
#         GPR_USER: ${{ secrets.GPR_USER }}
#         GPR_API_KEY: ${{ secrets.GITHUB_TOKEN }}
#       run: ./gradlew --info --stacktrace publish
#     - name: Create Release
#       id: create_release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#       with:
#         env:
#           VERSION: ./gradlew -q printVersionTest
#         tag_name: ${{ VERSION }}
#         release_name: Release ${{ VERSION }}
#         tag_name: ${{ github.ref }}
#         release_name: Release ${{ github.ref }}
#         body: |
#           Changes in this Release
#           - First Change
#           - Second Change
#         draft: false
#         prerelease: false


# NOT WORKING
#     - name: Upload Release Asset
#       id: upload-release-asset 
#       uses: actions/upload-release-asset@v1.0.1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#         asset_path: sdk/build/outputs/aar/sdk-release.aar
#         asset_name: sdk-release.aar
#         asset_content_type: application/zip


#     # WORKS AS EXPECTED!
#     - name: Set the build number output
#       run: echo "##[set-output name=build_number;]$BUILD_NUMBER"
#       id: build_package
#     - name: Capture Build Number
#       uses: ./.github/example-action
#       env:
#        GITHUB_TOKEN: ${{ secrets.TOKEN }}
#        APP_FOLDER: sdk
#        BUILD_CONFIG: debug # For now. Will need to be 'release' after we sign the apks
#        OUTPUT_TYPE: aar # Will be 'apk' for other projects
#        RELEASE_TITLE: WN-SDK
#        BUILD_NUMBER: ${{ steps.build_package.outputs.build_number }}


# TEMP step
#     - name: Echo items for testing
#       run: echo "ref is ${{ github.ref }}" && echo "ref is ${{ github.base_ref }}"
#     - name: Echo items for testing
#       run: echo "ref is $GITHUB_SHA"


# COMMENT TO PR, DOES NOT WORK. ISSUE ON REPO
#     - name: Intentionally failing step
#       run: cd fakeFolder
#     - name: Sample comment test
#       if: failure()
#       uses: unsplash/comment-on-pr@master
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         msg: "Build number $BUILD_NUMBER has failed. Could not cd fakeFolder"
