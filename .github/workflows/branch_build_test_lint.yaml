name: Branch Build Test Lint

on:
  push:
    branches-ignore:
      - master
      - integration

# Would be used only for Integration and Master branch building.
  # schedule:
    # - cron: 5 * * * *

# TODO: I'm not understanding the colleration between the GitHub repo names and the Components. Should and can we put the repo names into the components field to 
            # make is easier to identify which repo(s) is affected?
# TODO: Cross repo builds
        # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows#external-events-repository_dispatch
        # Hard way to send repository_dispatch(Use Action below instead): https://github.community/t5/GitHub-Actions/Triggering-by-other-repository/m-p/30668#M503
        # Scenario 1: Change pushed to WN-About. WN-About uses the action https://github.com/actions/checkout to checkout the SDK and builds.
        # Scenario 2: Change pushed to WN-SDK. WN-SDK has https://github.com/defold/repository-dispatch event trigger that fires in Int-PR, Int-Merge, Mas-PR, and Mas-Merge actions,
            # so regardless of where WN-SDK changes in only integration or master, we trip this event dispatch. We unfortunately have to trip it two times for each repository
            # that is dependent on WN-SDK, one for each of the Int-Merge, Mas-Merge actions in the WN-About repo for example.
        # Need to test, hopefully don't have issues like this: https://github.community/t5/GitHub-Actions/repository-dispatch-not-triggering-actions/m-p/33845#M1677
# TODO: Push a package to GitHub Packages (needs much more testing).
        # Figure out how to delete previous packages in WN-SDK repo.
# TODO: Create release repo to hold no source code, but only the collection of apks in a zip file in a release.
# TODO: Need to use zipalign to align the app to 4-byte boundary prior to signing. Performed by Bamboo on line 223 of:
        # https://github.com/realwear/BambooPlugins/blob/master/buildandroidproject/src/main/java/com/realwear/bamboo/android/buildandroidproject/BuildAndroidProject.java
        # zipAlign.toString(), "-p", "4", apk.getAbsolutePath(), outputFile.toString());
        # https://developer.android.com/studio/build/building-cmdline
# TODO: Need to sign the Release build
        # https://github.com/marketplace/actions/sign-android-release\
        # https://developer.android.com/training/articles/keystore
        # http://www.londatiga.net/it/how-to-sign-apk-zip-files/
        # javaExe.toString(), "-jar", apkSigner.toString(), "-w", pemFile.toString(), pk8File.toString(), apk.getAbsolutePath(), outputFile.toString());
        # https://developer.android.com/studio/build/building-cmdline
# TODO: Add jarsigner to verify what key signed the app. 
        # $ "jarsigner -verify -verbose -certs app.apk"
        # Result should be: - Signed by "EMAILADDRESS=info@realwear.com, OU=Software, O=RealWear Inc, L=Milpitas, ST=California, C=US"
                              # Digest algorithm: SHA-256
                              # Signature algorithm: SHA256withRSA, 2048-bit key
        # https://developer.android.com/studio/build/building-cmdline
# TODO: Greg's notes:
        # Retrieve translation differences and post them in release notes via "git log --grep Weblate etc." At least list the affected languages? Per repo? 
        # For total release package, need to have all apks unzip to same folder per Greg: https://realwear.atlassian.net/wiki/spaces/RSE/pages/420380780/Zip+File+Reference+for+Release+Collection
        # He would like the same format, such as the old method: "5 weeks ago 2019-10-16 13:54:46 +0100  Douglas Mearns HMT-3083 - fix of bug accidently introduced."
# TODO: Pull Request lint, verify the PR name or comments contains "HMT-xxxx"
        # https://github.com/vijaykramesh/pr-lint-action
        # Request from Kieren, what is the exact use case?
# TODO: Create an action that counts numbers of tests before and after, send message if number did not increase.
# TODO: Email out release notes when a release is created.
        # Existing GitHub Actions are V1, not V2 compatible. Would need a custom solution.
# TODO: Verify final artifact pushed to release is indeed "release" and NOT "debug". How can we determine the difference?
        # WAS BLOCKED, no idea how to do this just yet, need to try method below.
        # aapt dump badging /path/to/apk | grep -c application-debuggable from:
        # https://stackoverflow.com/questions/7085644/how-to-check-if-apk-is-signed-or-debug-build
# TODO: Incorporate actions/cache (Scott working on it)
        # https://github.com/actions/cache
# TODO: Incorporate and test cron schedule. NOT WORKING?
# TODO: Auto check for gradle updates?
        # https://github.com/MeilCli/gradle-update-check-action
# TODO LONG TERM: Use emulator to run instrumented tests: 
        # https://github.com/vgaidarji/android-github-actions/tree/master/emulator
        # https://github.com/Malinskiy/action-android
        # https://android.googlesource.com/platform/external/adt-infra/+/958180293308f4be67f6369acb075503f84a08b1/emu-image/external/
# TODO LONG TERM: Create an action that counts numbers of tests before and after, send message if number did not increase.
# TODO: Incorporate SonarQube?
        # Must download and install, so more than likely need to Dockerize it.
        # Create a custom github action similar to release-action, but using sonarqube.
        # OR incorporate gradle plugin, so devs will have visibility when they build locally? Hmmm. Probably not since they won't have it installed....
        # https://hub.docker.com/_/sonarqube
# TODO: Semantic pull requests, must have specific title in order to be merged
        # Will this assist us in the future?
        # https://probot.github.io/apps/semantic-pull-requests/
# TODO: Send both debug and release builds as uploads to the Release? 
        # Or create two releases each time, a 1.2.3.123-DEBUG and 1.2.3.123-RELEASE?
        # Not ideal, because release/latest won't work as we want.
        # Or do we put both artifacts into one release? Then download them and only pull the ones we want?
# TODO LONG TERM: Add lint to pull requests
        # https://github.com/seferov/pr-lint-action
        # https://github.com/wagoid/commitlint-github-action
# TODO: # Post build badge to PR comment and Jira comment

jobs:

  BranchBuildAndTest:

    runs-on: ubuntu-latest
    env: 
      MAJOR_VERSION: 0
      MINOR_VERSION: 0
      PATCH_VERSION: 0

    steps:

    - name: Generate build number
      uses: einaregilsson/build-number@v2
      with:
        token: ${{secrets.github_token}}

    - name: Print new build number
      run: echo "Build number is $BUILD_NUMBER"

    - name: Run the actions/checkout lib v1
      uses: actions/checkout@v1

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Get application version
      run: echo "::set-env name=MAJOR_VERSION::$(cat build.gradle | grep 'majorVersion = ' | awk '{print $3}')" &&
        echo "::set-env name=MINOR_VERSION::$(cat build.gradle | grep 'minorVersion = ' | awk '{print $3}')" &&
        echo "::set-env name=PATCH_VERSION::$(cat build.gradle | grep 'patchVersion = ' | awk '{print $3}')"

    - name: Set the four digit version
      run: echo "##[set-output name=version_build;]$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION.$BUILD_NUMBER"
      id: version_build_output
    
    - name: Echo the four digit version
      run: echo "Building application v${{ steps.version_build_output.outputs.version_build }}"

    - name: Set gradle version to 6.0
      run: chmod +x gradlew && ./gradlew wrapper --gradle-version=6.0

    - name: Check gradle version
      run: ./gradlew --version

    - name: Build the Debug
      run: ./gradlew assembleDebug

    - name: Build the Release
      run: ./gradlew assembleRelease

    - name: Run Unit Tests on Debug
      run: ./gradlew testDebugUnitTest

    - name: Run Unit Tests on Release
      run: ./gradlew testReleaseUnitTest

    - name: Ouput repository name without owner as variable
      run: echo "##[set-output name=repo_name;]${GITHUB_REPOSITORY#realwear/}"
      id: repo_name_output

    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: ${{ steps.repo_name_output.outputs.repo_name }}_v${{ steps.version_build_output.outputs.version_build }}
        path: sdk/build/outputs/aar

    - name: Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

    - name: Set branch as environment variable
      run: echo "##[set-output name=branch_name;]${GITHUB_REF#refs/heads/}"
      id: branch_name_output

      # TODO: Need to handle the failure. How?
    - name: Comment on issue
      uses: atlassian/gajira-comment@master
      continue-on-error: true # Continue in case Jira issue does not exist for this branch name
      with:
        issue: ${{ steps.branch_name_output.outputs.branch_name }} # The branch name should correlate with issue in Jira
        comment: |
          Build successful for ${{ github.repository }} 
          version v${{ steps.version_build_output.outputs.version_build }} 
          from branch "${{ steps.branch_name_output.outputs.branch_name }}"
          submitted by ${{ github.actor }}

  BranchLint:

    runs-on: ubuntu-latest

    steps:

    - name: Run the actions/checkout lib v1
      uses: actions/checkout@v1

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Set gradle version
      run: chmod +x gradlew && ./gradlew wrapper --gradle-version=6.0

    - name: Check gradle version
      run: ./gradlew --version

    - name: Run lint
      run: ./gradlew lint
